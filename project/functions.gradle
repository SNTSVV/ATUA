// DroidMate, an automated execution generator for Android apps.
// Copyright (C) 2012-2016 Konrad Jamrozik
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
// email: jamrozik@st.cs.uni-saarland.de
// web: www.droidmate.org

// Author: Konrad Jamrozik, github.com/konrad-jamrozik

/*
  This file contains functions used by multiple projects. These functions usually are workaround/hacks around Gradle limitations.
 */

subprojects {
	/*
	Making one Gradle project depend on other Gradle's project test output is highly nontrivial. Recommended solution is to
	depend on a test jar, as described here:

	http://stackoverflow.com/a/5153162/986533
	and here
	http://stackoverflow.com/a/15361666/986533

	However, then navigating to the sources of the dependency doesn't navigate to the IJ project, but to the jar, which is bad.
	Instead, I applied the following solution:

	http://stackoverflow.com/a/37423632/986533

	More discussion here:
	https://discuss.gradle.org/t/multiproject-testcompile-dependencies-not-seen-by-dependant-project/6779
	https://discuss.gradle.org/t/cross-project-test-dependencies/12117/6
	*/
	ext.dependWithTest = { Project target, String dependency, String lang ->

		target.evaluationDependsOn(dependency)

		if (lang == "kotlin") {
			target.dependencies {
				// This line makes IntelliJ navigate to sources instead of external jar.
				testCompileOnly files { project(dependency).sourceSets.test.kotlin.srcDirs }
			}
		} else
			assert false: "Unsupported language of dependency. The language: $lang"

		target.dependencies {
			// This makes the test classes of 'dependency' project available to the classpath of 'target' project
			testCompile project(dependency).sourceSets.test.output
			// This is just the plain project dependency.
			compile project(dependency)
		}
	}

	ext.dependOnJunit = { Project target ->
		/*
			Workaround for a bug causing tests run from Gradle to fail. Source of the workaround: [1]

			Suspected cause of the bug:
				Because project(":project:pcComponents:monitor-template") has android.jar as a transitive dependency, running tests
				from Gradle caused JUnit to throw "Stub!" from Assert method.

			[1] http://stackoverflow.com/a/7253941/986533
			[2] http://stackoverflow.com/questions/2422378/intellij-idea-with-junit-4-7-junit-version-3-8-or-later-expected
			[3] https://docs.gradle.org/2.5/release-notes#changes-in-ide-classpath-generation
					Linked from: https://youtrack.jetbrains.com/issue/IDEA-125971#comment=27-1087279
			[4] https://youtrack.jetbrains.com/issue/IDEA-148402
					Lined fromhttps://youtrack.jetbrains.com/issue/IDEA-125971#comment=27-1267028
 */
		target.configurations { forceJunitPriority }
		target.sourceSets.test.runtimeClasspath = target.configurations.forceJunitPriority + target.sourceSets.test.runtimeClasspath
		target.sourceSets.test.compileClasspath = target.configurations.forceJunitPriority + target.sourceSets.test.compileClasspath
		target.dependencies {
			forceJunitPriority 'junit:junit:4.12'
			testCompile 'junit:junit:4.12'
		}

	}

	ext.configureTest = { Project target, List includedTests ->
		target.test.configure {

			/* The tests have to be run from root project dir (droidmate) for the classpaths to be properly resolved.

			 API reference:
			 workingDir  http://www.gradle.org/docs/current/dsl/org.gradle.api.tasks.testing.Test.html
			 rootDir     http://www.gradle.org/docs/current/dsl/org.gradle.api.Project.html
			 */
			workingDir rootDir

			/* Lurking bug: GRADLE-1682.

			Currently the bug doesn't manifest itself, but if you run into "superClassName is empty", you bumped into it.

			Reference:
			http://stackoverflow.com/questions/14814837/gradle-test-fails-with-error
			http://stackoverflow.com/questions/11129401/debug-gradle-plugins-with-intellij/11129708#11129708
			http://issues.gradle.org/browse/GRADLE-1682
			Workaround: http://stackoverflow.com/a/14947906/986533
			*/
			includes = includedTests
		}
	}
}